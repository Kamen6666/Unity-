MiniMap:

///////////////////////////////////////
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class MiniMapView : MonoBehaviour
{
    private static MiniMapView instance;
    public static MiniMapView Instance
    {
        get
        {
            return instance;
        }
    }

    public MiniMapController controller;

    private MiniMapPoolManager poolManager;

    [HideInInspector]
    public Transform elementIconParent;

    public Dictionary<int, Transform> elementIconDict;

    public Vector3 mapSize = new Vector3( 30f, 1, 30f );

    public Vector2 miniMapSize;

    void Awake()
    {
        instance = this;

        controller = new MiniMapController();

        poolManager = GetComponent<MiniMapPoolManager>();

        miniMapSize = transform.GetComponent<RectTransform>().sizeDelta;

        elementIconDict = new Dictionary<int, Transform>();

        elementIconParent = transform.Find( "Mask/ElementParent" ).transform;

        controller.OnCreate();

    }

    public void CreateElementIcon( int id, MiniMapElementIconType iconType )
    {
        GameObject elementIcon = null;
        elementIcon = poolManager.TakeObject( iconType );
        elementIcon.SetActive( true );
        elementIconDict.Add( id, elementIcon.transform );
    }

    public void UpdateElementIcon( int id, MiniMapElementIconType iconType )
    {
        if ( !elementIconDict.ContainsKey( id ) )
        {
            return;
        }

        GameObject newIcon = null;
        newIcon = poolManager.TakeObject( iconType );
        newIcon.transform.localPosition = elementIconDict[id].localPosition;
        newIcon.SetActive( true );

        poolManager.ReleaseObject( controller.elementDataDict[id], elementIconDict[id].gameObject );
        controller.elementDataDict[id] = iconType;
        elementIconDict[id] = newIcon.transform;
    }

    public void DestroyElementIcon( int id )
    {
        if ( elementIconDict.ContainsKey( id ) )
        {
            poolManager.ReleaseObject( controller.elementDataDict[id], elementIconDict[id].gameObject );
            elementIconDict.Remove( id );
        }
    }

    public void MoveElementIcon( int id, Vector2 vec )
    {
        if ( elementIconDict.ContainsKey( id ) )
        {
            SetElementIconPosition( elementIconDict[id], vec );
        }
    }

    private void SetElementIconPosition( Transform elementIcon, Vector2 vec )
    {
        elementIcon.localPosition = new Vector2( miniMapSize.x * vec.x / mapSize.x, miniMapSize.y * vec.y / mapSize.z );
    }


    void Destroy()
    {
        controller.OnDestroy();
    }
}





//////////////
Camera:


using UnityEngine;
using UnityEngine.EventSystems;
using DG.Tweening;

public class MiniMapCameraManager : MonoBehaviour, IDragHandler, IPointerDownHandler{
    
    private Transform point;

    private Vector3 cameraOffset;

    private Vector2 pointOffset;

    private Vector3 mapSize;

    private Vector2 miniMapSize;

    private PolygonCollider2D polygonCollider2D;

    void Start()
    {
        point = transform.Find( "Mask/Bg/Point" );
        polygonCollider2D = transform.Find( "Mask/Bg" ).GetComponent<PolygonCollider2D>();

        mapSize = MiniMapView.Instance.mapSize;
        miniMapSize = MiniMapView.Instance.miniMapSize;
        
        cameraOffset = Camera.main.transform.position;

        InitPointPosition( cameraOffset );
    }

    public void OnPointerDown( PointerEventData eventData )
    {
        if ( !polygonCollider2D.OverlapPoint( eventData.position ) )
        {
            return;
        }

        point.position = eventData.position;

        SetCameraPosition( point.transform.localPosition );
    }

    public void OnDrag( PointerEventData eventData )
    {
        if ( !polygonCollider2D.OverlapPoint( eventData.position ) )
        {
            return;
        }

        if (Vector2.Distance(point.position, eventData.position) < 10)
        {
            return;
        }

        point.position = eventData.position;

        SetCameraPosition( point.transform.localPosition );
    }

    Tweener tweener;
    void SetCameraPosition(Vector2 vec)
    {
        vec = vec - pointOffset;
        Vector3 targetPosition = new Vector3( mapSize.x * vec.x / miniMapSize.x, 0, mapSize.z * vec.y / miniMapSize.y ) + cameraOffset;
        if ( tweener != null && tweener.IsPlaying() )
        {
            tweener.Kill( false );
        }

        tweener = DOTween.To( () => Camera.main.transform.position, value => Camera.main.transform.position = value, targetPosition, 0.3f ).SetEase(Ease.OutQuad);

    }

    void InitPointPosition( Vector3 vec )
    {
        Vector3 position = Vector3.zero;

        RaycastHit hit;
        Vector2 v = new Vector2( Screen.width / 2, Screen.height / 2 );
        if ( Physics.Raycast( Camera.main.ScreenPointToRay( v ), out hit ) )
        {
            position = hit.point;
        }

        Vector2 targetPosition = new Vector2( position.x * miniMapSize.x / mapSize.x, position.z * miniMapSize.y / mapSize.z );
        point.localPosition = targetPosition;
        pointOffset = targetPosition;
    }

}









