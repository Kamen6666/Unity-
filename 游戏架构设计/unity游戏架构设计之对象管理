对象管理当然是用来管理对象的，比如游戏里的角色模型，攻击时的粒子特效，甚至是角色数据。

对象管理是属于游戏整个架构中相对底层的模块。主要向上层提供对象的获取，归还。其本身要具备缓存功能，避免频繁从磁盘中读取资源。
对象管理是游戏中非常的重要和核心的模块之一，其性能的好坏往往直接决定了游戏的整体性能。这一点在规模较大的游戏中更加明显。
比如很难想象一款MMO的游戏没有一套完善的对象管理机制和高效健壮程序。


 游戏中有多种对象需要管理，比如npc，粒子特效，UI界面，等等
 虽然各种对象的管理思路迥异，但只要理解其中一种，其他几种也就触类旁通。
 
 战斗模块+地形模块（场景管理 ）
 
https://blog.csdn.net/wuming2016/article/details/60774896

“资源管理器”主要有两个重要的功能：资源加载和资源释放。

资源加载指的是把需要的资源（如prefab，材质，贴图等，从磁盘加载到内存中），供上层模块调用。这些资源通常以某种形式进行打包。
Unity3D通常是用AssetBundle打包。

       资源释放是与其对应的，就是把不用的资源从内存中卸载。那问题来了，什么时候资源什么时候不用？通常有两种情形。
       场景切换和角色不在屏幕时。难道此时我们就应该把资源从内存中释放？这样做也不是不可以，但这样就意味着做出来的游戏是低效的。
       可以脑补下策划，制作人的表情:) 道理很简单，如果每次不用了就从内存释放，那就意味着每次用的时候都要从磁盘加载。
       然而游戏的对象不用了往往是暂时不用，而不是永远不用了。不能简单的需要从磁盘加载到内存，不用就从内存释放，
       而是需要一些管理策略，因此就引出了对象管理这个概念。

对象管理器”是“资源管理器”和上层模块的一个中间层，缓存。他主要为那些暂时不用的资源提供内存缓存作用。
，并且缓存在对象管理中，暂时不用时不从资源管理器释放，而是由对象管理来接管。当下次再用的时候，就从对象管理来
取角色。都是在内存中，速度自然比从资源管理中快。也有人把“对象管理器”的功能集成在了“资源管理器”中。然而把他们分开
独立出来会使整个架构更清晰。



框架设计：

（1）架构是“约定、规则、共识” （2）框架具有约束性和支撑性  


关于Unity的架构有如下几种常用的方式简单总结如下:

1.EmptyGO:
  在 Hierarchy 上创建一个空的 GameObject,然后挂上所有与 GameObject 无关的逻辑控制的脚本。使用GameObject.Find() 访问对象数据。

缺点:逻辑代码散落在各处,不适合大型项目。

2.Simple GameManager:
  所有与 GameObject 无关的逻辑都放在一个单例中。 缺点:单一文件过于庞大。

3.Manager Of Managers:
将不同的功能单独管理。如下:

MainManager: 作为入口管理器。
EventManager: 消息管理。
GUIManager: 图形视图管理。
AudioManager: 音效管理。
PoolManager: GameObject管理（减少动态开辟内存消耗,减少GC)。
LevelManager: 关卡管理。
GameManager: 游戏管理。
SaveManager: 配置&存储管理。
MenuManager 菜单管理。
4.将 View 和 Model 之间增加一个媒介层。
MVCS:StrangeIOC 插件。

MVVM:uFrame 插件。

5. ECS (Entity Component Based System)
Unity 是基于 ECS,比较适合 GamePlay 模块使用
