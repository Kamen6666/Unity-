##游戏开发的过程当中首当其冲最重要的是： UI。##

工具类之对象池：

游戏UI中产生大量相同类型的物体时。如果每次创建完成都删除掉，会造成频繁的资源回收[GC]。

此时，对象池就是一种良好的设计模式，利于优化。


对象池的核心思想是：预先初始化一组可重用的实体，而不是按需销毁然后重建


我们利用对象池的核心思想就是“当我们第一次实例化好多个Item物体后，下一次打开如果界面更新就没必要再
创建第二次重复的资源物体了”，因此如果这个界面关闭的时候应该把资源临时存放在一个“池”里面。

pool:
--item
--item
--item

外表看来，就是资源保存在池中，外部表现就是item物体修改了父物体，然后关闭激活。

打开界面的时候，因为池中有资源，跳过读取资源实例化的过程。【资源加载和实例化是消耗极大性能的】

/*这里有必要强调的是，我们没必要单独去做第一次对象池的实例化，我们只需要知道，这个物体是重复的，所以这个物体我们都在
对象池中去取。而对象池也只关注，当别人调用了我的创建实例函数，我必须返回给它一个创建好的物体，而池子里面有
没有资源让对象池自己判断，如果没有则创建，如果有则直接拿出来给它，这种设计方法叫做空池触发*/


对象池存储对象【一种或者多种】：


多种：

思路：
将Queue<GameObject> 转换为Dictionary<string,Queue<GameObject>> 处理作为存储对象的功能。同时，
我们需要对象池可以识别多种对象，所以加入 Dictionary<GameObject,string>类型的变量存储物体Tag.

查阅：https://www.bilibili.com/read/cv54304




